pipeline {
    agent any
    parameters {
        choice(
            name: 'Environment',
            choices: ['main', 'dev', 'qa'],
            description: 'Please Select env'
        )
    }
    tools {
        nodejs "node"
    }
    environment {
        GIT_URL = "https://github.com/choudharyjayant/vue-vuex-registration-login-example.git"
         Zip_Name = "${BUILD_NUMBER}.zip"
         Application_name = "${params.Environment}-${JOB_NAME}"
         DeploymentGroup_Name = "DG-${params.Environment}-${JOB_NAME}"
         bucket_name = "${params.Environment}-${JOB_NAME}"
     }
    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/choudharyjayant/vue-vuex-registration-login-example.git'
             
            }
        }
        stage('verifying tools') {
            steps {
                sh ''' #! /bin/bash
                npm --version
                '''
            }
        }
        stage('Build') {
            steps {
                sh ''' #! /bin/bash
                npm install 
                
                npm run build
                sonar-scanner -Dsonar.organization=jenkins-prefav -Dsonar.projectKey=sonar-vuejs -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=c1689a002a8145664019678243034428835658c2
                '''
            }
        }
        stage ('Test') {
            steps {
                sh ''' #! /bin/bash
                echo 'testing'
                '''
            }
        }
       stage ('Artifact') {
            steps {
                withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred-2']]) {
                
                sh """ #! /bin/bash
                cd /var/lib/jenkins/workspace/${env.JOB_NAME}/
                
		        zip -r ${env.Zip_Name} dist *
				
		#To push zip folder to s3 
                aws s3 cp ${env.Zip_Name}  s3://${env.bucket_name}/
                """
                }
            }
        }
         stage('Deploy') {
             steps {
                 withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred-2']]) {
                
                 sh """ #! /bin/bash
				
	         #to deploy on aws from s3 bucket
                 aws deploy create-deployment --application-name ${env.Application_name} --deployment-group-name ${env.DeploymentGroup_Name} --deployment-config-name CodeDeployDefault.AllAtOnce --s3-location bucket=${env.bucket_name},bundleType=zip,key=${env.Zip_Name}    
                 
                 """
                 }
             }
         }
    }
    post {
        always {
            echo 'Stage is success'
        }
    }
}
